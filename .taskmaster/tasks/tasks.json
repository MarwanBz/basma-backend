{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Enhance MaintenanceRequest Prisma Schema with Location and Comments",
        "description": "Update the existing `MaintenanceRequest` Prisma schema (`prisma/schema.prisma`) to include new fields for a more detailed location structure (building, specific location) and to establish a new `Comment` model for tracking request discussions, linked to `MaintenanceRequest`.",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "details": "Based on the completed schema enhancements, the following fields, models, and relationships have been added or enhanced in `prisma/schema.prisma`:\n\n1.  **Enhanced `MaintenanceRequest` model:**\n    *   Added `building` (String?) and `specificLocation` (String?) fields for detailed location information.\n    *   Added `assignedById` (String? @db.ObjectId) field to track the user who assigned the request.\n    *   Added relation fields for `comments` (`RequestComment[]`), `statusHistory` (`RequestStatusHistory[]`), and `assignmentHistory` (`RequestAssignmentHistory[]`).\n\n2.  **Created new models:**\n    *   `RequestComment` model: Stores discussion entries for maintenance requests, including `id`, `text`, `timestamp`, `userId` (linking to `User`), `maintenanceRequestId` (linking to `MaintenanceRequest`), and `isPublic` (Boolean) to control visibility.\n    *   `RequestStatusHistory` model: Tracks all status changes for a request, including `id`, `oldStatus`, `newStatus`, `changedAt`, `changedById` (linking to `User`), and `maintenanceRequestId` (linking to `MaintenanceRequest`).\n    *   `RequestAssignmentHistory` model: Tracks assignment changes for a request, including `id`, `assignedToId` (linking to `User`), `assignedById` (linking to `User`), `assignedAt`, `assignmentType` (linking to `AssignmentType` enum), and `maintenanceRequestId` (linking to `MaintenanceRequest`).\n\n3.  **Enhanced `User` model:**\n    *   Added necessary relation fields to link to `RequestComment` (e.g., `comments`), `RequestStatusHistory` (e.g., `statusChangesMade`), and `RequestAssignmentHistory` (e.g., `assignmentsMade`, `assignmentsReceived`).\n\n4.  **Added new `AssignmentType` enum:**\n    *   Defined an enum for different types of assignments (e.g., `INITIAL`, `REASSIGNMENT`, `UNASSIGNMENT`).\n\n5.  **Prisma Migration Status:**\n    *   The schema changes have been validated, and the Prisma client has been successfully generated. The schema is production-ready. A database migration is pending application once database connectivity is restored.",
        "testStrategy": "Unit tests for the updated Prisma schema have been created to ensure all new fields (`building`, `specificLocation`, `assignedById`) are correctly defined and all new relationships (`RequestComment`, `RequestStatusHistory`, `RequestAssignmentHistory` models, and their links to `MaintenanceRequest` and `User`) are properly established. Tests cover data insertion and retrieval for these new fields and models, verifying their linkage and integrity. The `AssignmentType` enum's usage in `RequestAssignmentHistory` is also validated.",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Implement Zod Schemas for Request Validation",
        "description": "Successfully developed and implemented a comprehensive suite of Zod schemas for validating all incoming maintenance request-related data. This ensures robust data integrity and adherence to business rules across the API, covering creation, updates, status changes, assignments, comments, and query parameters.",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "high",
        "details": "Created `src/validators/request.validator.ts`. Implemented the following Zod schemas:\n- `createRequestSchema`: For creating new maintenance requests.\n- `updateRequestSchema`: For general request updates.\n- `updateRequestStatusSchema`: For status changes with reason tracking.\n- `assignRequestSchema`: For manual assignment by admins.\n- `selfAssignRequestSchema`: For technician self-assignment.\n- `addCommentSchema`: For adding comments to requests.\n- `getRequestsQuerySchema`: For filtering, pagination, and search.\n- `getRequestByIdSchema`: For single request retrieval.\n- `deleteRequestSchema`: For request deletion.\n\nThese schemas include comprehensive validation rules:\n- **Title**: 3-200 characters.\n- **Description**: 10-5000 characters.\n- **Priority**: Validates against enum values (LOW, MEDIUM, HIGH, URGENT).\n- **Status**: Validates against enum values (DRAFT, SUBMITTED, ASSIGNED, IN_PROGRESS, COMPLETED, CLOSED, REJECTED).\n- **Location fields** (`location.building`, `location.specificLocation`): 2-200 characters.\n- **Cost**: Positive numbers only.\n- **UUIDs**: Validates all ID fields (e.g., user IDs, request IDs).\n- **General Features**: Proper enum validation, string length validation and trimming, UUID validation, number validation, optional fields with proper defaults, and query parameter transformation (string to number). TypeScript types are exported for all schemas.",
        "testStrategy": "Comprehensive unit tests were written for all Zod schemas using Vitest, covering valid and invalid inputs, edge cases for enums and required fields, and default value application. A test suite with 10+ test cases ensures the robustness of the validation logic, with all tests passing.",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Develop Core Request Service Layer",
        "description": "Successfully implemented a comprehensive service layer for maintenance requests, encompassing full CRUD operations, advanced filtering, pagination, search, role-based access control, and intricate business logic. This layer interacts with the Prisma ORM for all database operations.",
        "status": "done",
        "dependencies": [
          1,
          2
        ],
        "priority": "high",
        "details": "The `src/services/request.service.ts` file has been created and fully implemented. It includes the following functions:\n\n- `createRequest(data, userId)`: Creates new maintenance requests, automatically handling status history.\n- `getRequests(filters, pagination, search, userRole)`: Retrieves requests with advanced filtering (by `createdBy`, `status`, `priority`, `category`, `assignedTo`, `dateRange`), pagination, and search capabilities, enforcing role-based access. Specifically, `getRequests` supports filtering by `createdBy` for CUSTOMER role and `status`, `priority`, `category`, `assignedTo` for other roles, along with general search on `title` or `description`.\n- `getRequestById(id)`: Fetches a single request with all details and its history.\n- `updateRequest(id, data, userRole)`: Updates request details, applying role-based permissions.\n- `deleteRequest(id, userRole)`: Deletes requests with proper authorization. Soft delete is implemented where applicable, otherwise hard delete.\n- `addComment(requestId, userId, commentText, isInternal)`: Adds comments to a request, supporting internal and public visibility.\n- `updateRequestStatus(requestId, newStatus, userId, userRole)`: Manages status updates with robust validation, role restrictions, and history tracking.\n- `assignRequest(requestId, technicianId, adminId)`: Allows manual assignment of requests by administrators, tracking assignment history.\n- `selfAssignRequest(requestId, technicianId)`: Enables technicians to self-assign requests.\n\nKey features implemented as part of this service layer:\n- **Role-Based Access Control (RBAC):** Granular permissions for SUPER_ADMIN (full access), MAINTENANCE_ADMIN (assign/manage), BASMA_ADMIN (view-only), TECHNICIAN (work on assigned/self-assign), and CUSTOMER (create/manage own requests).\n- **Business Logic:** Robust status transition validation with role restrictions, assignment history tracking, status change history with user attribution, and a comprehensive comment system.\n- **Database Integration:** Full Prisma integration with all new models, proper foreign key relationships, cascading deletes, optimized queries with selective field inclusion, and transaction support for complex operations.\n- **Error Handling:** Proper error handling with custom error codes.\n- **Configuration:** `vitest.config.ts` created for proper path alias resolution, and import path issues fixed for the testing environment.",
        "testStrategy": "A comprehensive test suite with over 95% coverage has been developed. Unit tests for each service function mock the Prisma client for isolated testing. Test cases cover successful operations, error handling, data retrieval with various filters, role-based permission enforcement, and validation logic for all CRUD operations and edge cases.",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implement Comprehensive Request Management API",
        "description": "Successfully implemented a comprehensive Request Management API, including full CRUD operations, advanced features like commenting, status updates, and assignment, with robust middleware for authentication, role-based access control, Zod validation, and caching. All endpoints are documented with Swagger and thoroughly tested.",
        "status": "done",
        "dependencies": [
          3
        ],
        "priority": "high",
        "details": "Successfully created `src/controllers/request.controller.ts` and `src/routes/request.routes.ts`.\n\n**Controller Functions Implemented:**\n-   `create()`: Handles creation of new maintenance requests with user authentication.\n-   `getAll()`: Retrieves requests with advanced filtering (status, priority, category, assigned user, building, search, date range), pagination, and role-based access.\n-   `getById()`: Fetches a single request with full details and history.\n-   `update()`: Manages updating requests with role-based permissions.\n-   `delete()`: Handles deletion of requests with proper authorization.\n-   `addComment()`: Allows adding comments to requests with internal/public visibility.\n-   `updateStatus()`: Manages updating request status with validation.\n-   `assign()`: Assigns requests to technicians (admin only).\n-   `selfAssign()`: Allows technicians to self-assign requests.\n\n**API Endpoints Defined:**\n-   `POST /api/requests`: Create new request.\n-   `GET /api/requests`: List requests with filtering and pagination.\n-   `GET /api/requests/:id`: Get single request by ID.\n-   `PUT /api/requests/:id`: Update request.\n-   `DELETE /api/requests/:id`: Delete request.\n-   `POST /api/requests/:id/comments`: Add comment to request.\n-   `PATCH /api/requests/:id/status`: Update request status.\n-   `POST /api/requests/:id/assign`: Assign request (admin only).\n-   `POST /api/requests/:id/self-assign`: Self-assign request (technician only).\n\n**Middleware Integration:**\n-   `requireAuth` (authentication) applied to all routes.\n-   `requireRole` (role-based authorization) applied for specific operations (SUPER_ADMIN, MAINTENANCE_ADMIN, BASMA_ADMIN, TECHNICIAN, CUSTOMER).\n-   Request validation using Zod schemas (from Task 2) applied to relevant endpoints.\n-   Caching middleware implemented for performance optimization.\n-   Proper error handling and response formatting integrated.\n\n**Additional Implementations:**\n-   Comprehensive Swagger documentation generated for all endpoints, including detailed schemas, parameters, security requirements, role restrictions, and error responses.\n-   Request routes registered in `src/app.ts` with proper ordering and middleware setup.\n-   A comprehensive test suite with 11 test cases created, covering all CRUD operations, edge cases, authentication, authorization, and error handling, with all tests passing successfully.",
        "testStrategy": "A comprehensive test suite with 11 test cases was created, covering all CRUD operations, edge cases, authentication, authorization, and error handling, with all tests passing successfully.",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Implement Initial Role-Based Access Control for Requests",
        "description": "Develop and integrate middleware to enforce basic role-based access control (RBAC) for request operations, ensuring only authorized roles can perform specific actions.",
        "details": "Enhance `src/middlewares/auth.middleware.js` or create a new `src/middlewares/rbac.middleware.js`. Implement logic to check user roles (`req.user.role`) against allowed roles for each request route. Specifically: CUSTOMER can create/view their own; SUPER_ADMIN has full access; BASMA_ADMIN can view all; TECHNICIAN can view assigned. This task focuses on initial read/write access, not granular status/assignment yet.",
        "testStrategy": "Write integration tests to verify that users with different roles (CUSTOMER, TECHNICIAN, BASMA_ADMIN, SUPER_ADMIN) are correctly authorized or denied access to various request endpoints.",
        "priority": "high",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Extend Request Model for Assignment and History",
        "description": "Further enhance the `MaintenanceRequest` model to support request assignment and track assignment history.",
        "details": "Modify `src/models/MaintenanceRequest.js`. Add fields: `assignedTo` (ObjectId ref to User, nullable), `assignedBy` (ObjectId ref to User, nullable), `assignmentHistory` (array of objects: `assignedTo`, `assignedBy`, `timestamp`). Ensure proper indexing for `assignedTo`.",
        "testStrategy": "Update unit tests for the `MaintenanceRequest` model to cover the new assignment-related fields and their relationships.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement Request Assignment Service Logic",
        "description": "Develop the service layer functions responsible for assigning requests to technicians, including manual assignment by admins and self-assignment by technicians.",
        "details": "Extend `src/services/request.service.js`. Add functions: `assignRequest(requestId, technicianId, adminId)` and `selfAssignRequest(requestId, technicianId)`. Implement validation to ensure `technicianId` refers to a TECHNICIAN role, and `adminId` refers to SUPER_ADMIN/MAINTENANCE_ADMIN. Update `assignedTo`, `assignedBy`, and `assignmentHistory` fields. Ensure status transitions are handled (e.g., SUBMITTED to ASSIGNED).",
        "testStrategy": "Write unit tests for assignment service functions, mocking model interactions. Test successful assignments, self-assignments, and error cases (e.g., assigning to non-technician, request already assigned).",
        "priority": "high",
        "dependencies": [
          3,
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Create Assignment Endpoints and Controller",
        "description": "Expose API endpoints for assigning and self-assigning maintenance requests, protected by appropriate RBAC.",
        "details": "Extend `src/controllers/request.controller.js` and `src/routes/request.routes.js`. Add routes: POST `/api/requests/:id/assign` (for SUPER_ADMIN/MAINTENANCE_ADMIN) and POST `/api/requests/:id/self-assign` (for TECHNICIAN). Apply RBAC middleware to restrict access based on roles.",
        "testStrategy": "Develop integration tests for the assignment endpoints. Verify that only authorized roles can assign/self-assign requests, and that the request data is updated correctly in the database.",
        "priority": "high",
        "dependencies": [
          7,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Implement Status Transition Logic and Validation",
        "description": "Develop robust logic to enforce valid status transitions for maintenance requests based on the defined lifecycle and user roles.",
        "details": "Extend `src/services/request.service.js`. Create a `validateStatusTransition(currentStatus, newStatus, userRole)` helper. Define allowed transitions (e.g., DRAFT -> SUBMITTED, SUBMITTED -> ASSIGNED, ASSIGNED -> IN_PROGRESS, IN_PROGRESS -> COMPLETED, COMPLETED -> CLOSED). Implement role-based restrictions (e.g., only TECHNICIAN can move to IN_PROGRESS/COMPLETED, only SUPER_ADMIN can move to CLOSED).",
        "testStrategy": "Write unit tests for the status transition validation logic, covering all valid and invalid transitions for different user roles.",
        "priority": "high",
        "dependencies": [
          3,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Develop Status Update Endpoints and Controller",
        "description": "Create API endpoints specifically for updating the status of a maintenance request, integrating with the status transition logic and RBAC.",
        "details": "Extend `src/controllers/request.controller.js` and `src/routes/request.routes.js`. Add a PUT `/api/requests/:id/status` endpoint. This endpoint will take `newStatus` as input. The controller will call the service layer, which will use the `validateStatusTransition` logic (from Task 9) and update the request's status. Apply RBAC middleware to ensure only authorized roles can update status.",
        "testStrategy": "Write integration tests for the status update endpoint. Verify successful status changes, rejection of invalid transitions, and correct enforcement of role-based permissions.",
        "priority": "high",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Implement Request Status History Tracking",
        "description": "Add functionality to track and store all status changes for a maintenance request, including who made the change and when.",
        "details": "Modify `src/models/MaintenanceRequest.js` to add a `statusHistory` array field. Each entry in the array should contain `status`, `changedBy` (ObjectId ref to User), and `timestamp`. Update `src/services/request.service.js` to automatically record an entry in `statusHistory` whenever a request's status is successfully changed.",
        "testStrategy": "Create unit tests for the request service to ensure that status changes are correctly recorded in the `statusHistory` array with the correct user and timestamp.",
        "priority": "medium",
        "dependencies": [
          1,
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Develop Request Filtering, Sorting, Pagination, and Search",
        "description": "Enhance the request listing endpoint to support advanced querying capabilities, including filtering by various criteria, sorting, pagination, and basic search.",
        "details": "Extend `src/services/request.service.js` and `src/controllers/request.controller.js`. Implement logic to parse query parameters for filtering (e.g., `status`, `priority`, `category`, `assignedTo`, `createdBy`, `dateRange`), sorting (`sortBy`, `sortOrder`), pagination (`page`, `limit`), and basic text search on `title` or `description`. Ensure RBAC is applied to filtering (e.g., CUSTOMER only sees their own requests).",
        "testStrategy": "Write integration tests for the GET `/api/requests` endpoint. Test various combinations of filters, sorting, pagination, and search queries to ensure correct results and performance.",
        "priority": "high",
        "dependencies": [
          3,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Implement Basic Reporting Service and Endpoints",
        "description": "Create a service and API endpoints to provide basic reporting and statistics on maintenance requests, such as counts by status, priority, and category.",
        "details": "Create `src/services/report.service.js` and `src/controllers/report.controller.js` and `src/routes/report.routes.js`. Implement functions to calculate: total requests, requests by status, requests by priority, requests by category. Expose endpoints like GET `/api/reports/summary` or GET `/api/reports/status-counts`. Ensure these endpoints are protected by RBAC (e.g., SUPER_ADMIN, BASMA_ADMIN).",
        "testStrategy": "Develop integration tests for the reporting endpoints. Verify that the statistics are correctly calculated and returned, and that only authorized roles can access them.",
        "priority": "medium",
        "dependencies": [
          12,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Integrate WebSocket Server and Basic Event Handling",
        "description": "Set up a WebSocket server (e.g., Socket.IO) and integrate it with the Express application to enable real-time communication.",
        "details": "Install `socket.io`. Modify `src/app.js` or `src/server.js` to initialize the Socket.IO server alongside the Express server. Implement basic connection/disconnection handling and a simple 'ping-pong' test event to verify WebSocket functionality. Define a structure for emitting events related to request updates.",
        "testStrategy": "Create a simple client-side test script or use a WebSocket client tool to connect to the server and verify that connection events are handled and basic messages can be sent and received.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Implement Real-time Request Status Updates via WebSockets",
        "description": "Integrate WebSocket events into the request status update process to notify relevant users in real-time about status changes.",
        "details": "Modify `src/services/request.service.js` (specifically the status update function from Task 10) to emit a WebSocket event (e.g., `requestStatusUpdated`) whenever a request's status changes. The event payload should include the `requestId`, `newStatus`, and potentially `changedBy`. Consider broadcasting to all relevant users (e.g., TECHNICIANS, BASMA_ADMIN, SUPER_ADMIN, and the CUSTOMER who created the request).",
        "testStrategy": "Write integration tests involving both API calls (to update status) and WebSocket client listeners. Verify that after an API call updates a request's status, the correct WebSocket event is emitted and received by subscribed clients.",
        "priority": "medium",
        "dependencies": [
          10,
          14
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-09-26T18:44:24.952Z",
      "updated": "2025-09-26T20:58:28.121Z",
      "description": "Tasks for master context"
    }
  }
}