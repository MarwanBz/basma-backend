generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_DATABASE_URL")
}

model user {
  id                       String                       @id @default(uuid())
  name                     String                       @db.VarChar(99)
  email                    String                       @unique @db.VarChar(99)
  password                 String?                      @db.VarChar(100)
  refreshToken             String?                      @db.Text
  role                     user_role                    @default(USER)
  emailVerified            DateTime?
  emailVerificationToken   String?                      @db.VarChar(100)
  emailVerificationExpires DateTime?
  passwordResetToken       String?                      @db.VarChar(100)
  passwordResetExpires     DateTime?
  image                    String?
  createdAt                DateTime                     @default(now())
  updatedAt                DateTime                     @updatedAt
  buildingConfigsCreated   building_config[]            @relation("BuildingConfigCreator")
  fcm_device_tokens        fcm_device_tokens[]
  filesUploaded            file_attachment[]            @relation("FileUploader")
  requestsAssignedBy       maintenance_request[]        @relation("RequestAssigner")
  requestsAssigned         maintenance_request[]        @relation("RequestAssignee")
  requestsCreated          maintenance_request[]        @relation("RequestCreator")
  assignmentsMade          request_assignment_history[] @relation("AssignmentChanger")
  previousAssignments      request_assignment_history[] @relation("PreviousAssignee")
  newAssignments           request_assignment_history[] @relation("NewAssignee")
  commentsCreated          request_comment[]            @relation("CommentCreator")
  identifiersCreated       request_identifier[]         @relation("IdentifierCreator")
  statusChangesMade        request_status_history[]     @relation("StatusChanger")

  @@map("users")
}

model request_category {
  id          Int                   @id @default(autoincrement())
  name        String                @db.VarChar(50)
  description String?               @db.VarChar(255)
  isActive    Boolean               @default(true)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  requests    maintenance_request[]

  @@index([name])
  @@index([isActive])
  @@map("request_categories")
}

model maintenance_request {
  id                String                       @id @default(uuid())
  title             String                       @db.VarChar(200)
  description       String                       @db.Text
  priority          request_priority             @default(MEDIUM)
  status            request_status               @default(SUBMITTED)
  categoryId        Int
  location          String                       @db.VarChar(100)
  building          String?                      @db.VarChar(100)
  specificLocation  String?                      @db.VarChar(200)
  requestedById     String
  assignedToId      String?
  assignedById      String?
  estimatedCost     Decimal?                     @db.Decimal(10, 2)
  actualCost        Decimal?                     @db.Decimal(10, 2)
  scheduledDate     DateTime?
  completedDate     DateTime?
  createdAt         DateTime                     @default(now())
  updatedAt         DateTime                     @updatedAt
  customIdentifier  String?                      @unique @db.VarChar(50)
  assignedBy        user?                        @relation("RequestAssigner", fields: [assignedById], references: [id])
  assignedTo        user?                        @relation("RequestAssignee", fields: [assignedToId], references: [id])
  category          request_category             @relation(fields: [categoryId], references: [id])
  identifier        request_identifier?          @relation(fields: [customIdentifier], references: [identifier])
  requestedBy       user                         @relation("RequestCreator", fields: [requestedById], references: [id])
  assignmentHistory request_assignment_history[]
  comments          request_comment[]
  statusHistory     request_status_history[]

  @@index([status])
  @@index([priority])
  @@index([categoryId])
  @@index([requestedById])
  @@index([assignedToId])
  @@index([assignedById])
  @@index([createdAt])
  @@index([scheduledDate])
  @@index([building])
  @@map("maintenance_requests")
}

model request_comment {
  id         String              @id @default(uuid())
  text       String              @db.Text
  isInternal Boolean             @default(false)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  userId     String
  requestId  String
  request    maintenance_request @relation(fields: [requestId], references: [id], onDelete: Cascade)
  user       user                @relation("CommentCreator", fields: [userId], references: [id])

  @@index([requestId])
  @@index([userId])
  @@index([createdAt])
  @@map("request_comments")
}

model request_status_history {
  id          String              @id @default(uuid())
  fromStatus  request_status?
  toStatus    request_status
  reason      String?             @db.VarChar(500)
  createdAt   DateTime            @default(now())
  changedById String?
  requestId   String
  changedBy   user?               @relation("StatusChanger", fields: [changedById], references: [id])
  request     maintenance_request @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@index([requestId])
  @@index([changedById])
  @@index([createdAt])
  @@map("request_status_history")
}

model request_assignment_history {
  id               String              @id @default(uuid())
  fromTechnicianId String?
  toTechnicianId   String?
  assignmentType   assignment_type
  reason           String?             @db.VarChar(500)
  createdAt        DateTime            @default(now())
  assignedById     String
  requestId        String
  assignedBy       user                @relation("AssignmentChanger", fields: [assignedById], references: [id])
  fromTechnician   user?               @relation("PreviousAssignee", fields: [fromTechnicianId], references: [id])
  request          maintenance_request @relation(fields: [requestId], references: [id], onDelete: Cascade)
  toTechnician     user?               @relation("NewAssignee", fields: [toTechnicianId], references: [id])

  @@index([requestId])
  @@index([assignedById])
  @@index([fromTechnicianId])
  @@index([toTechnicianId])
  @@index([createdAt])
  @@map("request_assignment_history")
}

model request_identifier {
  id             String               @id @default(uuid())
  identifier     String               @unique @db.VarChar(50)
  building       String               @db.VarChar(100)
  year           Int
  sequence       Int
  isActive       Boolean              @default(true)
  customPattern  String?              @db.VarChar(200)
  customSequence Int?
  createdBy      String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  requests       maintenance_request?
  creator        user                 @relation("IdentifierCreator", fields: [createdBy], references: [id])

  @@index([building])
  @@index([year])
  @@index([isActive])
  @@index([identifier])
  @@index([createdBy], map: "request_identifiers_createdBy_fkey")
  @@map("request_identifiers")
}

model building_config {
  id              String   @id @default(uuid())
  buildingName    String   @unique @db.VarChar(100)
  buildingCode    String   @unique @db.VarChar(20)
  displayName     String   @db.VarChar(100)
  currentSequence Int      @default(0)
  lastResetYear   Int?
  allowCustomId   Boolean  @default(false)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String
  creator         user     @relation("BuildingConfigCreator", fields: [createdBy], references: [id])

  @@index([buildingName])
  @@index([buildingCode])
  @@index([isActive])
  @@index([createdBy], map: "building_configs_createdBy_fkey")
  @@map("building_configs")
}

model file_attachment {
  id               String                 @id @default(uuid())
  originalName     String                 @db.VarChar(255)
  fileName         String                 @unique @db.VarChar(255)
  filePath         String                 @db.Text
  fileSize         Int
  mimeType         String                 @db.VarChar(100)
  fileExtension    String                 @db.VarChar(10)
  checksum         String                 @db.VarChar(64)
  width            Int?
  height           Int?
  duration         Int?
  processingStatus file_processing_status @default(PENDING)
  thumbnailPath    String?                @db.Text
  isPublic         Boolean                @default(false)
  isScanned        Boolean                @default(false)
  scanResult       String?                @db.VarChar(20)
  isValidated      Boolean                @default(false)
  entityType       file_entity_type
  entityId         String
  uploadedById     String
  uploadIp         String?                @db.VarChar(45)
  expiresAt        DateTime?
  downloadCount    Int                    @default(0)
  lastAccessedAt   DateTime?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  uploadedBy       user                   @relation("FileUploader", fields: [uploadedById], references: [id])

  @@index([entityType, entityId])
  @@index([uploadedById])
  @@index([processingStatus])
  @@index([isPublic])
  @@index([expiresAt])
  @@index([createdAt])
  @@index([checksum])
  @@map("file_attachments")
}

model fcm_device_tokens {
  id                      String                     @id
  token                   String                     @unique @db.VarChar(500)
  platform                fcm_device_tokens_platform
  deviceId                String?                    @db.VarChar(100)
  appVersion              String?                    @db.VarChar(20)
  isActive                Boolean                    @default(true)
  lastUsedAt              DateTime?
  createdAt               DateTime                   @default(now())
  updatedAt               DateTime
  userId                  String
  users                   user                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  fcm_topic_subscriptions fcm_topic_subscriptions[]

  @@index([isActive])
  @@index([lastUsedAt])
  @@index([platform])
  @@index([userId])
}

model fcm_topic_subscriptions {
  id                String            @id
  topic             String            @db.VarChar(100)
  createdAt         DateTime          @default(now())
  tokenId           String
  fcm_device_tokens fcm_device_tokens @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@unique([tokenId, topic])
  @@index([topic])
}

enum user_role {
  SUPER_ADMIN
  MAINTENANCE_ADMIN
  BASMA_ADMIN
  TECHNICIAN
  CUSTOMER
  ADMIN
  USER
}

enum request_status {
  DRAFT
  SUBMITTED
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CLOSED
  REJECTED
}

enum request_priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum assignment_type {
  INITIAL_ASSIGNMENT
  REASSIGNMENT
  SELF_ASSIGNMENT
  UNASSIGNMENT
}

enum file_entity_type {
  MAINTENANCE_REQUEST
  REQUEST_COMMENT
  USER_PROFILE
  BUILDING_CONFIG
}

enum file_processing_status {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  THUMBNAIL_GENERATING
  VIRUS_SCANNING
}

enum fcm_device_tokens_platform {
  ANDROID
  IOS
  WEB
}
